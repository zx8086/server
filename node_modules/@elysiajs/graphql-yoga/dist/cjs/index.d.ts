import { type Elysia } from 'elysia';
import type { CreateMobius, Resolver } from 'graphql-mobius';
import { type YogaServerOptions, type YogaInitialContext } from 'graphql-yoga';
import type { IExecutableSchemaDefinition } from '@graphql-tools/schema';
import type { TypeSource } from '@graphql-tools/utils';
type MaybePromise<T> = T | Promise<T>;
type Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
interface ElysiaYogaConfig<TypeDefs extends TypeSource, Context extends undefined | MaybePromise<Record<string, unknown>> | ((initialContext: YogaInitialContext) => MaybePromise<unknown>)> extends Omit<YogaServerOptions<{}, {}>, 'schema' | 'typeDefs' | 'context' | 'cors'>, Omit<IExecutableSchemaDefinition<{}>, 'resolvers'> {
    path?: string;
    typeDefs: TypeDefs;
    context?: Context;
    useContext?: (_: this['context']) => void;
    resolvers: Resolver<TypeDefs extends string ? CreateMobius<TypeDefs> : {
        Query: Record<string, unknown>;
        Mutation: Record<string, unknown>;
        Subscription: Record<string, unknown>;
    }, Context extends undefined ? {
        request: Request;
    } : Context extends (a: YogaInitialContext) => infer A ? Prettify<NonNullable<Awaited<A>> & {
        request: Request;
    }> : Prettify<NonNullable<Awaited<Context>> & {
        request: Request;
    }>>;
}
export declare const yoga: <const TypeDefs extends string, Context extends MaybePromise<Record<string, unknown>> | ((initialContext: YogaInitialContext) => MaybePromise<unknown>) | undefined, const Prefix extends string = "/graphql">({ path, typeDefs, resolvers, resolverValidationOptions, inheritResolversFromInterfaces, updateResolversInPlace, schemaExtensions, ...config }: ElysiaYogaConfig<TypeDefs, Context>) => (app: Elysia) => Elysia<"", {
    request: {};
    store: {};
}, {
    type: {};
    error: {};
}, {}, {
    [x: string]: {
        get: {
            body: unknown;
            params: unknown;
            query: unknown;
            headers: unknown;
            response: {
                200: Promise<Response>;
            };
        };
    } & {
        post: {
            body: unknown;
            params: unknown;
            query: unknown;
            headers: unknown;
            response: {
                200: Promise<Response>;
            };
        };
    };
}, false>;
export default yoga;
