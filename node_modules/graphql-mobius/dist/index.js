var R=(n,d)=>{const i=JSON.stringify(d[n]??d,(t,e)=>{if(typeof e!=="object")return e;if(typeof e==="object"&&("select"in e)&&!("where"in e))return e.select;const y={};for(let[S,r]of Object.entries(e)){if(typeof r==="object"&&("where"in r)){y[`${S}(${JSON.stringify(r.where)})`]=r.select;continue}y[S]=r}return y},2);return n+" _ "+i.replace(/\\/g,"").replace(/(.*): {/g,(t)=>t.slice(1,-3)+" {").replace(/"(\w+)": true(,)?/g,(t)=>t.slice(1,t[t.length-1]===","?-8:-7)).replace(/"(\w+)(\((.*)\))?" {/g,(t)=>t.slice(1,-3)+" {").replace(/\(\{/g,"(").replace(/\}\)/g,")").replace(/\): true/g,")").replace(/"(\w+)":/g,(t)=>t.slice(1,-2)+":").replace(/"(\w+)(\((.*)\))?": true/g,(t)=>t.slice(1,-7))},x=/fragment\s+(\w+)\s+on\s+[\w:]+\s*{([^}]*)}/g,$=(n)=>{const d=n.match(x);if(!d)return{};const i={};if(d)for(let t of d){const[,e,y]=x.exec(d),S={};for(let r of y.split(/(,|\n)/g))S[r.trim()]=!0;i[e]=S}return i};class T{n;klein=null;resolvers=null;fragments=null;constructor(n){this.config=n;if(n?.typeDefs)this.fragments=$(n.typeDefs)}get fetch(){return this.config?.fetch??((n)=>fetch(this.config?.url??"",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:n,variables:{}})}).then((d)=>d.json().then((i)=>i.data)))}$(n){return{query:R("query",n),mutation:R("mutation",n),subscription:R("subscription",n)}}query(n){return this.fetch(R("query",n))}mutate(n){return this.fetch(R("mutation",n))}subscription(n){return this.fetch(R("subscription",n))}}var D=T;export{R as mobiusToGraphQL,D as default,$ as createFragment,T as Mobius};

//# debugId=0E51291E5EF54EAC64756e2164756e21
